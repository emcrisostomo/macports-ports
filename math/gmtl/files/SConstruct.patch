Fixes for Python 3 compatibility.
--- SConstruct.orig	2009-11-21 15:31:52.000000000 -0600
+++ SConstruct	2023-03-08 06:47:38.000000000 -0600
@@ -3,6 +3,7 @@
 EnsureSConsVersion(0,96)
 SConsignFile()
 
+from subprocess import Popen, PIPE
 import os, string, sys
 import re
 import distutils.sysconfig
@@ -16,10 +17,6 @@
 sys.path.append('tools/build')
 from AutoDist import *
 
-# True and False were not defined prior to Python 2.2.1.
-if sys.version[:3] == '2.2' and sys.version[3] != '.':
-   False = 0
-   True  = 1
 
 enable_python      = False
 boost_version      = '1.31'
@@ -48,17 +45,17 @@
 
 def GetPlatform():
    "Determines what platform this build is being run on."
-   if string.find(sys.platform, 'irix') != -1:
+   if sys.platform.find('irix') != -1:
       return 'irix'
-   elif string.find(sys.platform, 'linux') != -1:
+   elif sys.platform.find('linux') != -1:
       return 'linux'
-   elif string.find(sys.platform, 'freebsd') != -1:
+   elif sys.platform.find('freebsd') != -1:
       return 'freebsd'
-   elif string.find(sys.platform, 'darwin') != -1:
+   elif sys.platform.find('darwin') != -1:
       return 'darwin'
-   elif string.find(sys.platform, 'cygwin') != -1:
+   elif sys.platform.find('cygwin') != -1:
       return 'cygwin'
-   elif string.find(os.name, 'win32') != -1:
+   elif os.name.find('win32') != -1:
       return 'win32'
    else:
       return sys.platform
@@ -131,8 +128,8 @@
    CXX = os.environ.get("CXX", WhereIs('g++'))
 
    ver_re = re.compile(r'gcc version ((\d+)\.(\d+)\.(\d+))')
-   (gv_stdout, gv_stdin, gv_stderr) = os.popen3(CXX + ' -v')
-   ver_str = gv_stderr.read()
+   gv = Popen([CXX, '-v'], stderr=PIPE)
+   ver_str = gv.stderr.read().decode('utf-8')
 
    match_obj = ver_re.search(ver_str)
 
@@ -220,16 +217,16 @@
       # 9.0.
       msvs_ver = ARGUMENTS["MSVS_VERSION"]
       if msvs_ver not in ("7.1", "9.0"):
-         print "Cannot build Python extensions using MSVS version %s" % \
-                  msvs_ver
+         print("Cannot build Python extensions using MSVS version %s" % \
+                  msvs_ver)
          sys.exit(1)
 
       python_ver = sys.version[:3]
       if msvs_ver == "7.1" and python_ver not in ("2.4", "2.5"):
-         print "Python 2.4 or 2.5 must be used with Visual C++ 7.1"
+         print("Python 2.4 or 2.5 must be used with Visual C++ 7.1")
          sys.exit(1)
       elif msvs_ver == "9.0" and python_ver not in ("2.6"):
-         print "Python 2.6 must be used with Visual C++ 9.0"
+         print("Python 2.6 must be used with Visual C++ 9.0")
          sys.exit(1)
 
       env = Environment(MSVS_VERSION = msvs_ver)
@@ -239,7 +236,7 @@
    else:
       env = Environment(ENV = os.environ)
 
-   print "Using MSVS version:", env["MSVS"]["VERSION"]
+   print("Using MSVS version:", env["MSVS"]["VERSION"])
    compiler_major_ver = env["MSVS"]["VERSION"]
    
    # We need exception handling support turned on for Boost.Python.
@@ -283,7 +280,7 @@
    elif GetPlatform() == 'cygwin':
       env = BuildCygwinEnvironment()
    else:
-      print 'Unsupported build environment: ' + GetPlatform(), "Trying default"
+      print('Unsupported build environment: ' + GetPlatform(), "Trying default")
       env = Environment()
 
    return env
@@ -299,7 +296,7 @@
       exp = re.compile('^(\d+\.\d+(\.\d+)?)\D*$')
       match = exp.search(value)
       boost_version = match.group(1)
-      print "Using Boost version", boost_version
+      print("Using Boost version", boost_version)
    else:
       assert False, "Invalid Boost key"
 
@@ -307,7 +304,7 @@
    "Validate the boost option settings"
    global enable_python, optimize, compiler_major_ver
    req_boost_version = 103100
-   print "checking for %s [%s]...\n" % (key, value)
+   print("checking for %s [%s]...\n" % (key, value))
 
    if "BoostPythonDir" == key:
       version_dir = 'boost-' + re.sub(r'\.', '_', boost_version)   
@@ -315,16 +312,16 @@
       potential_inc_paths = [pj('include', version_dir), "include"]
       for pth in potential_inc_paths:
          if os.path.isdir(pj(value,pth)):
-	    boost_inc_dir = pj(value,pth)	    
-	    break
-      print "   trying boost include dir: [%s]"%boost_inc_dir
+            boost_inc_dir = pj(value,pth)
+            break
+      print("   trying boost include dir: [%s]"%boost_inc_dir)
 
       # Get the boost version.
       boost_ver_filename = pj(boost_inc_dir, 'boost', 'version.hpp')
       if not os.path.isfile(boost_ver_filename):
          sys.stdout.write("%s not found.\n" % boost_ver_filename)
-	 enable_python = False
-	 return False
+         enable_python = False
+         return False
 
       ver_file = file(boost_ver_filename)
 
@@ -334,7 +331,7 @@
       sys.stdout.write("found version: %s\n" % ver_num)
 
       if ver_num < req_boost_version:
-         print "   Boost version too old!  Required version: %s" % req_boost_version
+         print("   Boost version too old!  Required version: %s" % req_boost_version)
          Exit()
          return False
 
@@ -414,16 +411,16 @@
                                           '%s%s.%s' % (shlib_prefix, n,
                                                        shlib_ext))
 
-               print "Checking for '%s'" % boost_python_lib_name
+               print("Checking for '%s'" % boost_python_lib_name)
                if os.path.isfile(boost_python_lib_name):
-                  print "Using '%s'" % boost_python_lib_name
+                  print("Using '%s'" % boost_python_lib_name)
                   bpl_libdir = l
                   bpl_name   = n
                   bpl_found  = True
                   break
 
          if not bpl_found:
-            print "No Boost.Python library was found in", libdirs
+            print("No Boost.Python library was found in", libdirs)
             Exit()
             return False
 
@@ -472,7 +469,7 @@
          python = WhereIs('python')
          if not python:
             enable_python = False
-            print 'WARNING: Can\'t find python executable'
+            print('WARNING: Can\'t find python executable')
             return False
 
          py_cmd = python + ' -c \'import sys; print sys.prefix; print sys.version[:3]\''
@@ -493,7 +490,7 @@
 
          # Version must match
          if float(py_ver) < required_version:
-            print 'WARNING: Python version ' + py_ver + ' != ' + str(required_version)
+            print('WARNING: Python version ' + py_ver + ' != ' + str(required_version))
             enable_python = False
          else:
             # Build up the env information
@@ -567,7 +564,7 @@
       }
 
          my_file = env.SubstBuilder('file.out','file.in', submap=submap)
-         env.AddPostAction (my_file, Chmod('$TARGET', 0644))
+         env.AddPostAction (my_file, Chmod('$TARGET', 0o644))
          env.Depends(my_file, 'version.h')
    """
    targets = map(lambda x: str(x), target)
@@ -587,7 +584,7 @@
 
       # Write out the target file with the new contents
       open(targets[i], 'w').write(contents)
-      os.chmod(targets[i], 0755)
+      os.chmod(targets[i], 0o755)
 
 def generate_builder_str(target, source, env):
    builderStr = "generating: ";
@@ -606,7 +603,7 @@
 
 # Figure out what version of GMTL we're building
 GMTL_VERSION = GetGMTLVersion()
-print 'Building GMTL Version: %i.%i.%i' % GMTL_VERSION
+print('Building GMTL Version: %i.%i.%i' % GMTL_VERSION)
 
 help_text = "\n---- GMTL Build System ----\n"
 
@@ -617,7 +614,7 @@
 Prefix(PREFIX)
 Export('PREFIX')
 Export('optimize')
-print "Install prefix: ", Prefix()
+print("Install prefix: ", Prefix())
 
 baseEnv = BuildPlatformEnv()
 baseEnv["BUILDERS"]["SubstBuilder"] = \
@@ -659,7 +656,7 @@
 Export('installed_targets')
 
 if not has_help_flag:
-   print "Preparing build settings...\n"
+   print("Preparing build settings...\n")
 
    # Create the GMTL package
    pkg = Package('gmtl', '%i.%i.%i' % GMTL_VERSION)
@@ -711,7 +708,7 @@
       base_inst_paths['include'] = pj('${fp_file_cwd}' ,'..' ,'..', 'include',
                                       include_version)
 
-   print "using prefix:", base_inst_paths['base']         
+   print("using prefix:", base_inst_paths['base'])
       
    for h in gmtl_headers:
       installed_targets += baseEnv.InstallAs(pj(PREFIX, include_dir, h), h)
@@ -758,7 +755,7 @@
    fpc_filename = "-".join(name_parts) + ".fpc"
    gmtl_fpc = env.SubstBuilder(pj(base_inst_paths['flagpoll'], fpc_filename), 
                                'gmtl.fpc.in', submap = submap)
-   env.AddPostAction(gmtl_fpc, Chmod('$TARGET', 0644))
+   env.AddPostAction(gmtl_fpc, Chmod('$TARGET', 0o644))
    env.Depends(gmtl_fpc, 'gmtl/Version.h')
 
    installed_targets += env.Install(base_inst_paths['bin'], 'gmtl-config')
