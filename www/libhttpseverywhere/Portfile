# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                libhttpseverywhere
version             0.6.3
license             LGPL-3
set branch          [join [lrange [split ${version} .] 0 1] .]
categories          www
maintainers         nomaintainer
platforms           darwin

description         This library enables you to leverage the power \
                    of HTTPSEverywhere to any desktop-application.

long_description    ${description}. HTTPSEverywhere is a browser plugin \
                    that comes with a set of rules that you can use \
                    to ensure that you use HTTP instead of HTTPS only \
                    when this is absolutely not circumventable. \
                    With libhttpseverywhere you get a C-bindable, \
                    GLib-based library you can link/bind against \
                    in almost all languages

homepage            https://git.gnome.org//browse/${name}
master_sites        gnome:sources/${name}/${branch}/

use_xz              yes

checksums           rmd160  fdad4684373659f2ddc2537a4aaeff7bf3fd3078 \
                    sha256  55890f689edcfe1e403a4689d74257a351131cf7e315abc32648726b27c9445b

depends_build       port:pkgconfig \
                    port:meson \
                    port:ninja

depends_lib         path:lib/pkgconfig/glib-2.0.pc:glib2 \
                    port:json-glib \
                    port:gobject-introspection \
                    port:libarchive \
                    port:libgee \
                    port:libsoup \
                    port:libxml2 \
                    port:vala

configure.cmd       meson
configure.post_args . build

# meson requires builds be in build subdir
build.dir           ${worksrcpath}/build
build.cmd           ninja
build.target

test.run            yes
test.dir            ${worksrcpath}/build
test.cmd            ./httpseverywhere_test
test.target

# DESTDIR must come before ninja command rather than after
destroot.dir        ${worksrcpath}/build
destroot.cmd        DESTDIR=${destroot} ninja
destroot.destdir

# meson ninja backend improperly sets shared library install name
# based on build_dir rather than install_dir
post-destroot {
    set libname ${prefix}/lib/${name}-0.6.0.dylib
    system "install_name_tool -id ${libname} ${destroot}${libname}"
}

livecheck.type      gnome
