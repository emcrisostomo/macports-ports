--- include/compat/gcc/stdatomic.h.orig	2021-01-02 07:36:25.000000000 +1100
+++ include/compat/gcc/stdatomic.h	2021-02-04 13:46:53.000000000 +1100
@@ -29,18 +29,42 @@
 
 #if !defined(__cplusplus)
 
-typedef int atomic_int;
-typedef unsigned int atomic_uint;
+#ifdef __clang__
+#if !defined(__has_feature)
+#define __has_feature(x) 0
+#endif
+
+#if !defined(__has_extension)
+#define __has_extension(x) __has_feature(x)
+#endif
+
+#if __has_extension(c_atomic) || __has_extension(cxx_atomic)
+#define __CLANG_ATOMICS
+#endif
+#endif
 
 #define memory_order_relaxed __ATOMIC_RELAXED
 #define memory_order_acquire __ATOMIC_ACQUIRE
 
+#ifdef __CLANG_ATOMICS
+typedef _Atomic(int) atomic_int;
+typedef _Atomic(unsigned int) atomic_uint;
+#define atomic_init(p_a, v)           __c11_atomic_init(p_a, v)
+#define atomic_store(p_a, v)          __c11_atomic_store(p_a, v, __ATOMIC_SEQ_CST)
+#define atomic_load(p_a)              __c11_atomic_load(p_a, __ATOMIC_SEQ_CST)
+#define atomic_load_explicit(p_a, mo) __c11_atomic_load(p_a, mo)
+#define atomic_fetch_add(p_a, inc)    __c11_atomic_fetch_add(p_a, inc, __ATOMIC_SEQ_CST)
+#define atomic_fetch_sub(p_a, dec)    __c11_atomic_fetch_sub(p_a, dec, __ATOMIC_SEQ_CST)
+else
+typedef int atomic_int;
+typedef unsigned int atomic_uint;
 #define atomic_init(p_a, v)           do { *(p_a) = (v); } while(0)
 #define atomic_store(p_a, v)          __atomic_store_n(p_a, v, __ATOMIC_SEQ_CST)
 #define atomic_load(p_a)              __atomic_load_n(p_a, __ATOMIC_SEQ_CST)
 #define atomic_load_explicit(p_a, mo) __atomic_load_n(p_a, mo)
 #define atomic_fetch_add(p_a, inc)    __atomic_fetch_add(p_a, inc, __ATOMIC_SEQ_CST)
 #define atomic_fetch_sub(p_a, dec)    __atomic_fetch_sub(p_a, dec, __ATOMIC_SEQ_CST)
+#endif
 
 #endif /* !defined(__cplusplus) */
 
--- meson.build.orig	2021-01-02 07:36:25.000000000 +1100
+++ meson.build	2021-02-04 01:59:22.000000000 +1100
@@ -183,6 +183,11 @@
         stdatomic_dependency = declare_dependency(
             include_directories : include_directories('include/compat/gcc'),
         )
+    elif cc.compiles('''int main() { _Atomic(int) v = 0; return __c11_atomic_fetch_add(&v, 1, __ATOMIC_SEQ_CST); }''',
+                     name : 'Clang-style atomics', args : test_args)
+        stdatomic_dependency = declare_dependency(
+            include_directories : include_directories('include/compat/gcc'),
+        )
     else
         error('Atomics not supported')
     endif
