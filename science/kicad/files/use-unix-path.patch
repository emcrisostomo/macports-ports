diff --git 3d-viewer/3d_cache/3d_plugin_manager.cpp 3d-viewer/3d_cache/3d_plugin_manager.cpp
index cf9def2..b47e438 100644
--- 3d-viewer/3d_cache/3d_plugin_manager.cpp
+++ 3d-viewer/3d_cache/3d_plugin_manager.cpp
@@ -124,7 +124,7 @@ void S3D_PLUGIN_MANAGER::loadPlugins( void )
     std::list< wxString > pluginlist;
     wxFileName fn;
 
-#ifndef __WXMAC__
+#ifndef __MACOSX_APP__
 
 #ifdef DEBUG
     // set up to work from the build directory
diff --git 3d-viewer/3d_cache/sg/CMakeLists.txt 3d-viewer/3d_cache/sg/CMakeLists.txt
index 0899a19..a9d361c 100644
--- 3d-viewer/3d_cache/sg/CMakeLists.txt
+++ 3d-viewer/3d_cache/sg/CMakeLists.txt
@@ -35,7 +35,7 @@ endif( MINGW )
 
 add_library( kicad_3dsg SHARED ${SG_FILES} )
 
-if( APPLE )
+if( MACOSX_APP )
     # puts library into the main kicad.app bundle in build tree
     set_target_properties( kicad_3dsg PROPERTIES
         LIBRARY_OUTPUT_DIRECTORY "${OSX_BUNDLE_BUILD_LIB_DIR}"
diff --git CMakeLists.txt CMakeLists.txt
index 1cd76e8..1f47e1b 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -156,6 +156,10 @@ option( KICAD_STEP_EXPORT_LIB
     "Build and use kicad2step as a library, meant for debugging"
     OFF )
 
+option( KICAD_MACOSX_APP_BUNDLE
+    "Create macOS Application bundle"
+    ON )
+
 # Global setting: exports are explicit
 set( CMAKE_CXX_VISIBILITY_PRESET "hidden" )
 set( CMAKE_VISIBILITY_INLINES_HIDDEN ON )
@@ -177,6 +181,15 @@ if( KICAD_GAL_PROFILE )
     add_definitions( -DKICAD_GAL_PROFILE )
 endif()
 
+if ( KICAD_MACOSX_APP_BUNDLE )
+    add_definitions ( -D__MACOSX_APP__ )
+    set ( MACOSX_APP TRUE CACHE BOOL "Create macOS bundle" )
+    set ( MACOSX_APP_BUNDLE "MACOSX_BUNDLE" CACHE STRING "Create macOS bundle" )
+else()
+    set ( MACOSX_APP FALSE CACHE BOOL "Don't create macOS bundle" )
+    set ( MACOSX_APP_BUNDLE "" CACHE STRING "Don't create macOS bundle" )
+endif()
+
 # Ensure DEBUG is defined for all platforms in Debug builds
 # change to add_compile_definitions() after minimum required CMake version is 3.12
 set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DEBUG> )
@@ -508,7 +521,7 @@ set( KIFACE_PREFIX  "_" )
 #================================================
 # Locations for install targets.
 #================================================
-if( NOT APPLE )
+if( NOT MACOSX_APP )
     # Everything without leading / is relative to CMAKE_INSTALL_PREFIX.
     set( KICAD_BIN bin
         CACHE PATH "Location of KiCad binaries." )
@@ -795,7 +808,7 @@ if( NOT PYTHON_SITE_PACKAGE_PATH )
     endif()
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
     set( OSX_BUNDLE_PYTHON_SITE_PACKAGES_DIR ${OSX_BUNDLE_LIB_DIR}/Python.framework/Versions/${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages)
     set( OSX_BUNDLE_INSTALL_PYTHON_SITE_PACKAGES_DIR "${OSX_BUNDLE_INSTALL_DIR}/${OSX_BUNDLE_PYTHON_SITE_PACKAGES_DIR}")
     set( PYTHON_DEST "${OSX_BUNDLE_BUILD_DIR}/${OSX_BUNDLE_PYTHON_SITE_PACKAGES_DIR}"
@@ -888,7 +901,7 @@ if( MINGW )
     endif()
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
     # Remove app bundles in ${KICAD_BIN} before installing anything new.
     # Must be defined before all includes so that it is executed first.
     install( CODE "
diff --git bitmap2component/CMakeLists.txt bitmap2component/CMakeLists.txt
index 6abea12..accfa1c 100644
--- bitmap2component/CMakeLists.txt
+++ bitmap2component/CMakeLists.txt
@@ -33,7 +33,7 @@ else()
     set( BITMAP2COMPONENT_RESOURCES ${CMAKE_SOURCE_DIR}/resources/msw/bitmap2component.rc )
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
     # setup bundle
     set( BITMAP2COMPONENT_RESOURCES bitmap2component.icns )
     set_source_files_properties( "${CMAKE_CURRENT_SOURCE_DIR}/bitmap2component.icns" PROPERTIES
@@ -44,7 +44,7 @@ if( APPLE )
     set( MACOSX_BUNDLE_NAME bitmap2component )
 endif()
 
-add_executable( bitmap2component WIN32 MACOSX_BUNDLE
+add_executable( bitmap2component WIN32 ${MACOSX_APP_BUNDLE}
     ${BITMAP2COMPONENT_SRCS}
     ${BITMAP2COMPONENT_RESOURCES}
     )
@@ -55,7 +55,7 @@ target_link_libraries( bitmap2component
     potrace
     )
 
-if( APPLE )
+if( MACOSX_APP )
     set_target_properties( bitmap2component PROPERTIES
         MACOSX_BUNDLE_INFO_PLIST ${PROJECT_BINARY_DIR}/bitmap2component/Info.plist
         )
diff --git common/gestfich.cpp common/gestfich.cpp
index 7ad46c0..05b79ad 100644
--- common/gestfich.cpp
+++ common/gestfich.cpp
@@ -53,7 +53,7 @@ wxString FindKicadFile( const wxString& shortname )
 {
     // Test the presence of the file in the directory shortname of
     // the KiCad binary path.
-#ifndef __WXMAC__
+#ifndef __MACOSX_APP__
     wxString fullFileName = Pgm().GetExecutablePath() + shortname;
 #else
     wxString fullFileName = Pgm().GetExecutablePath() + wxT( "Contents/MacOS/" ) + shortname;
@@ -79,7 +79,7 @@ wxString FindKicadFile( const wxString& shortname )
 
     // Path list for KiCad binary files
     const static wxChar* possibilities[] = {
-#if defined( __WXMAC__ )
+#if defined( __MACOSX_APP__ )
         // all internal paths are relative to main bundle kicad.app
         wxT( "Contents/Applications/pcbnew.app/Contents/MacOS/" ),
         wxT( "Contents/Applications/eeschema.app/Contents/MacOS/" ),
@@ -91,13 +91,14 @@ wxString FindKicadFile( const wxString& shortname )
         wxT( "/usr/bin/" ),
         wxT( "/usr/local/bin/" ),
         wxT( "/usr/local/kicad/bin/" ),
+	wxT( "@PREFIX_BIN@/" ),
 #endif
     };
 
     // find binary file from possibilities list:
     for( unsigned i=0;  i<arrayDim(possibilities);  ++i )
     {
-#ifndef __WXMAC__
+#ifndef __MACOSX_APP__
         fullFileName = possibilities[i] + shortname;
 #else
         // make relative paths absolute
diff --git common/kiway.cpp common/kiway.cpp
index ab84801..04ba3a6 100644
--- common/kiway.cpp
+++ common/kiway.cpp
@@ -121,7 +121,7 @@ const wxString KIWAY::dso_search_path( FACE_T aFaceId )
         return wxEmptyString;
     }
 
-#ifndef __WXMAC__
+#ifndef __MACOSX_APP__
     wxString path;
 
     if( m_ctl & (KFCTL_STANDALONE | KFCTL_CPP_PROJECT_SUITE) )
@@ -147,7 +147,7 @@ const wxString KIWAY::dso_search_path( FACE_T aFaceId )
 
     if( wxGetEnv( wxT( "KICAD_RUN_FROM_BUILD_DIR" ), nullptr ) )
     {
-#ifdef __WXMAC__
+#ifdef __MACOSX_APP__
         // On Mac, all of the kifaces are placed in the kicad.app bundle, even though the individual
         // standalone binaries are placed in separate bundles before the make install step runs.
         // So, we have to jump up to the kicad directory, then the PlugIns section of the kicad
diff --git common/paths.cpp common/paths.cpp
index c2e37a5..eba49ca 100644
--- common/paths.cpp
+++ common/paths.cpp
@@ -29,7 +29,7 @@
 #include <config.h>
 
 // lowercase or pretty case depending on platform
-#if defined( __WXMAC__ ) || defined( __WXMSW__ )
+#if defined( __MACOSX_APP__ ) || defined( __WXMSW__ )
 #define KICAD_PATH_STR "KiCad"
 #else
 #define KICAD_PATH_STR "kicad"
@@ -154,7 +154,7 @@ wxString PATHS::GetStockDataPath( bool aRespectRunFromBuildDir )
     if( aRespectRunFromBuildDir && wxGetEnv( wxT( "KICAD_RUN_FROM_BUILD_DIR" ), nullptr ) )
     {
         // Allow debugging from build dir by placing relevant files/folders in the build root
-#if defined( __WXMAC__ )
+#if defined( __MACOSX_APP__ )
         wxFileName fn = wxStandardPaths::Get().GetExecutablePath();
 
         fn.RemoveLastDir();
@@ -170,7 +170,7 @@ wxString PATHS::GetStockDataPath( bool aRespectRunFromBuildDir )
     }
     else
     {
-#if defined( __WXMAC__ )
+#if defined( __MACOSX_APP__ )
         path = GetOSXKicadDataDir();
 #elif defined( __WXMSW__ )
         path = getWindowsKiCadRoot() + wxT( "share/kicad" );
@@ -187,7 +187,7 @@ wxString PATHS::GetStockEDALibraryPath()
 {
     wxString path;
 
-#if defined( __WXMAC__ )
+#if defined( __MACOSX_APP__ )
     path = GetOSXKicadMachineDataDir();
 #elif defined( __WXMSW__ )
     path = GetStockDataPath( false );
@@ -266,7 +266,7 @@ wxString PATHS::GetStockPlugins3DPath()
     fn.Assign( tfname, "" );
     fn.AppendDir( wxT( "kicad" ) );
     fn.AppendDir( wxT( "plugins" ) );
-#elif defined( __WXMAC__ )
+#elif defined( __MACOSX_APP__ )
     fn.Assign( wxStandardPaths::Get().GetPluginsDir(), wxEmptyString );
 #else
     fn.AssignDir( Pgm().GetExecutablePath() );
@@ -306,7 +306,7 @@ wxString PATHS::GetDocumentationPath()
 {
     wxString path;
 
-#if defined( __WXMAC__ )
+#if defined( __MACOSX_APP__ )
     path = GetOSXKicadDataDir();
 #elif defined( __WXMSW__ )
     path = getWindowsKiCadRoot() + "share/doc/kicad";
diff --git common/systemdirsappend.cpp common/systemdirsappend.cpp
index d322fab..8997c02 100644
--- common/systemdirsappend.cpp
+++ common/systemdirsappend.cpp
@@ -52,7 +52,7 @@ void SystemDirsAppend( SEARCH_STACK* aSearchStack )
     // Otherwise don't set it.
     maybe.AddPaths( wxGetenv( wxT( "KICAD" ) ) );
 
-#ifdef __WXMAC__
+#ifdef __MACOSX_APP__
     // Add the directory for the user-dependent, program specific data files.
     maybe.AddPaths( PATHS::GetOSXKicadUserDataDir() );
 
@@ -137,7 +137,7 @@ void SystemDirsAppend( SEARCH_STACK* aSearchStack )
     {
         wxFileName fn( maybe[i], wxEmptyString );
 
-#ifndef __WXMAC__
+#ifndef __MACOSX_APP__
         if( fn.GetPath().AfterLast( fn.GetPathSeparator() ) == wxT( "bin" ) )
         {
             fn.RemoveLastDir();
@@ -149,7 +149,7 @@ void SystemDirsAppend( SEARCH_STACK* aSearchStack )
 
         aSearchStack->AddPaths( fn.GetPath() );
 
-#ifndef __WXMAC__
+#ifndef __MACOSX_APP__
         fn.AppendDir( wxT( "kicad" ) );
         aSearchStack->AddPaths( fn.GetPath() );     // add maybe[i]/kicad
 
diff --git cvpcb/CMakeLists.txt cvpcb/CMakeLists.txt
index a98f64a..6e91941 100644
--- cvpcb/CMakeLists.txt
+++ cvpcb/CMakeLists.txt
@@ -97,7 +97,7 @@ if( MAKE_LINK_MAPS )
 endif()
 
 # these 2 binaries are a matched set, keep them together:
-if( APPLE )
+if( MACOSX_APP )
     # puts binaries into the *.app bundle while linking
     set_target_properties( cvpcb_kiface PROPERTIES
         LIBRARY_OUTPUT_DIRECTORY ${OSX_BUNDLE_BUILD_KIFACE_DIR}
diff --git eeschema/CMakeLists.txt eeschema/CMakeLists.txt
index 0112020..9021c13 100644
--- eeschema/CMakeLists.txt
+++ eeschema/CMakeLists.txt
@@ -341,7 +341,7 @@ set_source_files_properties( sch_text.cpp
         OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/sch_text_help_md.h
     )
 
-if( APPLE )
+if( MACOSX_APP )
     # setup bundle
     set( EESCHEMA_RESOURCES eeschema.icns eeschema_doc.icns )
     set_source_files_properties( "${CMAKE_CURRENT_SOURCE_DIR}/eeschema.icns" PROPERTIES
@@ -356,7 +356,7 @@ if( APPLE )
 endif()
 
 
-add_executable( eeschema WIN32 MACOSX_BUNDLE
+add_executable( eeschema WIN32 ${MACOSX_APP_BUNDLE}
     ${CMAKE_SOURCE_DIR}/common/single_top.cpp
     ${CMAKE_SOURCE_DIR}/common/pgm_base.cpp
     ${EESCHEMA_RESOURCES}
@@ -440,7 +440,7 @@ if( MAKE_LINK_MAPS )
 endif()
 
 # these 2 binaries are a matched set, keep them together:
-if( APPLE )
+if( MACOSX_APP )
     set_target_properties( eeschema PROPERTIES
         MACOSX_BUNDLE_INFO_PLIST ${PROJECT_BINARY_DIR}/eeschema/Info.plist
         )
diff --git eeschema/bom_plugins.cpp eeschema/bom_plugins.cpp
index b18c680..9f4715f 100644
--- eeschema/bom_plugins.cpp
+++ eeschema/bom_plugins.cpp
@@ -75,7 +75,7 @@ BOM_GENERATOR_HANDLER::BOM_GENERATOR_HANDLER( const wxString& aFile )
 #else
 // For macOS, we want to use the Python we bundle along, rather than just PYTHON_EXECUTABLE.
 // For non-Windows, non-macOS, we can call out to PYTHON_EXECUTABLE.
-#ifdef __APPLE__
+#ifdef __MACOSX_APP__
         // python is at Contents/Frameworks/Python.framework/Versions/Current/bin/python3
 
         // Of course, for macOS, it's not quite that simple, since the relative path
diff --git eeschema/dialogs/dialog_netlist.cpp eeschema/dialogs/dialog_netlist.cpp
index b837e4d..fc8df0b 100644
--- eeschema/dialogs/dialog_netlist.cpp
+++ eeschema/dialogs/dialog_netlist.cpp
@@ -677,7 +677,7 @@ void NETLIST_DIALOG_ADD_GENERATOR::OnBrowseGenerators( wxCommandEvent& event )
 {
     wxString FullFileName, Path;
 
-#ifndef __WXMAC__
+#ifndef __MACOSX_APP__
     Path = Pgm().GetExecutablePath();
 #else
     Path = PATHS::GetOSXKicadDataDir() + wxT( "/plugins" );
diff --git eeschema/sim/ngspice.cpp eeschema/sim/ngspice.cpp
index 4d2c0a6..fe566c9 100644
--- eeschema/sim/ngspice.cpp
+++ eeschema/sim/ngspice.cpp
@@ -431,7 +431,7 @@ void NGSPICE::init_dll()
   #else
     const vector<string> dllPaths = { "", "/mingw64/bin", "/mingw32/bin" };
   #endif
-#elif defined(__WXMAC__)
+#elif defined(__MACOSX_BUNDLE__)
     const vector<string> dllPaths = {
         PATHS::GetOSXKicadUserDataDir().ToStdString() + "/PlugIns/ngspice",
         PATHS::GetOSXKicadMachineDataDir().ToStdString() + "/PlugIns/ngspice",
@@ -444,7 +444,7 @@ void NGSPICE::init_dll()
                 "/../../../../../Contents/PlugIns/sim"
     };
 #else   // Unix systems
-    const vector<string> dllPaths = { "/usr/local/lib" };
+    const vector<string> dllPaths = { "@PREFIX_DIR@/lib" };
 #endif
 
 #if defined(__WINDOWS__) || (__WXMAC__)
diff --git gerbview/CMakeLists.txt gerbview/CMakeLists.txt
index a1ebe19..380392f 100644
--- gerbview/CMakeLists.txt
+++ gerbview/CMakeLists.txt
@@ -89,7 +89,7 @@ else()
     set( GERBVIEW_RESOURCES ${CMAKE_SOURCE_DIR}/resources/msw/gerbview.rc )
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
     # setup bundle
     set( GERBVIEW_RESOURCES gerbview.icns gerbview_doc.icns )
     set_source_files_properties( "${CMAKE_CURRENT_SOURCE_DIR}/gerbview.icns" PROPERTIES
@@ -103,7 +103,7 @@ if( APPLE )
     set( MACOSX_BUNDLE_NAME gerbview )
 endif()
 
-add_executable( gerbview WIN32 MACOSX_BUNDLE
+add_executable( gerbview WIN32 ${MACOSX_APP_BUNDLE}
     ${CMAKE_SOURCE_DIR}/common/single_top.cpp
     ${CMAKE_SOURCE_DIR}/common/pgm_base.cpp
     ${GERBVIEW_RESOURCES}
@@ -177,7 +177,7 @@ target_include_directories( gerbview_kiface PRIVATE
 add_dependencies( gerbview gerbview_kiface )
 
 # these 2 binaries are a matched set, keep them together
-if( APPLE )
+if( MACOSX_APP )
     set_target_properties( gerbview PROPERTIES
         MACOSX_BUNDLE_INFO_PLIST ${PROJECT_BINARY_DIR}/gerbview/Info.plist
         )
diff --git kicad/CMakeLists.txt kicad/CMakeLists.txt
index ec1d89c..7c016fb 100644
--- kicad/CMakeLists.txt
+++ kicad/CMakeLists.txt
@@ -45,7 +45,7 @@ else()
     set( KICAD_RESOURCES ${CMAKE_SOURCE_DIR}/resources/msw/kicad.rc )
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
     set( KICAD_RESOURCES kicad.icns kicad_doc.icns )
     set_source_files_properties( "${CMAKE_CURRENT_SOURCE_DIR}/kicad.icns" PROPERTIES
         MACOSX_PACKAGE_LOCATION Resources
@@ -58,7 +58,7 @@ if( APPLE )
     set( MACOSX_BUNDLE_NAME kicad )
 endif()
 
-add_executable( kicad WIN32 MACOSX_BUNDLE
+add_executable( kicad WIN32 ${MACOSX_APP_BUNDLE}
     ${KICAD_SRCS}
     ${KICAD_EXTRA_SRCS}
     ${KICAD_RESOURCES}
@@ -78,7 +78,7 @@ if( UNIX )
         )
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
     set_target_properties( kicad PROPERTIES
         MACOSX_BUNDLE_INFO_PLIST ${PROJECT_BINARY_DIR}/kicad/Info.plist
         )
@@ -110,7 +110,7 @@ if( KICAD_WIN32_INSTALL_PDBS )
     install(FILES $<TARGET_PDB_FILE:kicad> DESTINATION ${KICAD_BIN})
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
     # "install( CODE ... )" will launch its own CMake, so no variables from
     # this CMake instance are accessible... use helper to transfer
     set( SCRIPTING_HELPER "1" )
diff --git kicad/tools/kicad_manager_control.cpp kicad/tools/kicad_manager_control.cpp
index eb028fd..657c626 100644
--- kicad/tools/kicad_manager_control.cpp
+++ kicad/tools/kicad_manager_control.cpp
@@ -802,7 +802,7 @@ int KICAD_MANAGER_CONTROL::Execute( const TOOL_EVENT& aEvent )
         wxString msg = wxString::Format( _( "%s %s opened [pid=%ld]\n" ), execFile, param, pid );
         m_frame->PrintMsg( msg );
 
-#ifdef __WXMAC__
+#ifdef __MACOSX_APP__
         // This non-parameterized use of wxExecute is fine because execFile is not derived
         // from user input.
         wxExecute( "osascript -e 'activate application \"" + execFile + "\"'" );
diff --git pagelayout_editor/CMakeLists.txt pagelayout_editor/CMakeLists.txt
index 7d89db2..4aabe5d 100644
--- pagelayout_editor/CMakeLists.txt
+++ pagelayout_editor/CMakeLists.txt
@@ -60,7 +60,7 @@ else()
 endif()
 
 
-if( APPLE )
+if( MACOSX_APP )
     # setup bundle
     set( PL_EDITOR_RESOURCES pagelayout_editor.icns pagelayout_editor_doc.icns )
     set_source_files_properties( "${CMAKE_CURRENT_SOURCE_DIR}/pagelayout_editor.icns" PROPERTIES
@@ -75,7 +75,7 @@ if( APPLE )
 endif()
 
 # a very small program launcher for pl_editor_kiface
-add_executable( pl_editor WIN32 MACOSX_BUNDLE
+add_executable( pl_editor WIN32 ${MACOSX_APP_BUNDLE}
     ${CMAKE_SOURCE_DIR}/common/single_top.cpp
     ${CMAKE_SOURCE_DIR}/common/pgm_base.cpp
     ${PL_EDITOR_RESOURCES}
@@ -128,7 +128,7 @@ endif()
 add_dependencies( pl_editor pl_editor_kiface )
 
 # these 2 binaries are a matched set, keep them together:
-if( APPLE )
+if( MACOSX_APP )
     set_target_properties( pl_editor PROPERTIES
         MACOSX_BUNDLE_INFO_PLIST ${PROJECT_BINARY_DIR}/pagelayout_editor/Info.plist
         )
diff --git pcb_calculator/CMakeLists.txt pcb_calculator/CMakeLists.txt
index caabda4..2cd5ff5 100644
--- pcb_calculator/CMakeLists.txt
+++ pcb_calculator/CMakeLists.txt
@@ -56,7 +56,7 @@ else()
     set( PCB_CALCULATOR_RESOURCES ${CMAKE_SOURCE_DIR}/resources/msw/pcb_calculator.rc )
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
     # setup bundle
     set( PCB_CALCULATOR_RESOURCES pcb_calculator.icns )
     set_source_files_properties( "${CMAKE_CURRENT_SOURCE_DIR}/pcb_calculator.icns" PROPERTIES
@@ -67,7 +67,7 @@ if( APPLE )
     set( MACOSX_BUNDLE_NAME pcb_calculator )
 endif()
 
-add_executable( pcb_calculator WIN32 MACOSX_BUNDLE
+add_executable( pcb_calculator WIN32 ${MACOSX_APP_BUNDLE}
     ${CMAKE_SOURCE_DIR}/common/single_top.cpp
     ${CMAKE_SOURCE_DIR}/common/pgm_base.cpp
     ${PCB_CALCULATOR_RESOURCES}
@@ -116,7 +116,7 @@ endif()
 add_dependencies( pcb_calculator pcb_calculator_kiface )
 
 # these 2 binaries are a matched set, keep them together
-if( APPLE )
+if( MACOSX_APP )
     set_target_properties( pcb_calculator PROPERTIES
         MACOSX_BUNDLE_INFO_PLIST ${PROJECT_BINARY_DIR}/pcb_calculator/Info.plist
         )
diff --git pcbnew/CMakeLists.txt pcbnew/CMakeLists.txt
index 0ae24f0..2e6ec35 100644
--- pcbnew/CMakeLists.txt
+++ pcbnew/CMakeLists.txt
@@ -573,7 +573,7 @@ set_source_files_properties( dialogs/panel_setup_rules.cpp
         OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/panel_setup_rules_help_md.h
     )
 
-if( APPLE )
+if( MACOSX_APP )
     # setup bundle
     set( PCBNEW_RESOURCES pcbnew.icns pcbnew_doc.icns )
     set_source_files_properties( "${CMAKE_CURRENT_SOURCE_DIR}/pcbnew.icns" PROPERTIES
@@ -596,7 +596,7 @@ add_subdirectory( plugins/fabmaster )
 set( PCBNEW_IO_LIBRARIES pcad2kicadpcb altium2pcbnew cadstar2pcbnew fabmaster CACHE INTERNAL "")
 
 # a very small program launcher for pcbnew_kiface
-add_executable( pcbnew WIN32 MACOSX_BUNDLE
+add_executable( pcbnew WIN32 ${MACOSX_APP_BUNDLE}
     ${CMAKE_SOURCE_DIR}/common/single_top.cpp
     ${PCBNEW_RESOURCES}
     )
@@ -738,7 +738,7 @@ if( WIN32 )
 endif()
 
 # these 2 binaries are a matched set, keep them together:
-if( APPLE )
+if( MACOSX_APP )
     set_target_properties( pcbnew PROPERTIES
         MACOSX_BUNDLE_INFO_PLIST ${PROJECT_BINARY_DIR}/pcbnew/Info.plist
         )
@@ -782,7 +782,7 @@ if( KICAD_WIN32_INSTALL_PDBS )
     install(FILES $<TARGET_PDB_FILE:pcbnew_kiface> DESTINATION ${KICAD_BIN})
 endif()
 
-if( NOT APPLE )
+if( NOT MACOSX_APP )
     install( FILES ${CMAKE_BINARY_DIR}/pcbnew/pcbnew.py DESTINATION ${PYTHON_DEST} )
 else()
     # put into bundle at build time, it is relocated at install
@@ -807,7 +807,7 @@ install( DIRECTORY ${PROJECT_SOURCE_DIR}/pcbnew/python/plugins/
 if( MINGW OR VCPKG_TOOLCHAIN )
     install( FILES ${CMAKE_BINARY_DIR}/pcbnew/_pcbnew.pyd DESTINATION ${PYTHON_DEST} )
     set( PYMOD_EXT "pyd" )
-elseif( APPLE )
+elseif( MACOSX_APP )
      # put everything into bundle at build time, it is relocated at install
     add_custom_target( ScriptingModulesPcbnewSoCopy ALL
         COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_BINARY_DIR}/pcbnew/_pcbnew.so" "${PYTHON_DEST}/"
@@ -821,7 +821,7 @@ else()  # only linux remains among supported platforms
     set( PYMOD_EXT "so" )
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
      add_custom_command( OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_pcbnew.${PYMOD_EXT}
         DEPENDS pcbnew_kiface
         COMMAND ${CMAKE_COMMAND} -E copy  ${OSX_BUNDLE_BUILD_KIFACE_DIR}/_pcbnew.kiface _pcbnew.${PYMOD_EXT}
@@ -845,7 +845,7 @@ else()
 endif()
 
 
-if( APPLE )
+if( MACOSX_APP )
     # If we don't have wxPython, then we must create the site-packages directory
     add_custom_target( ScriptingPythonDirectoryCreation ALL
         COMMAND ${CMAKE_COMMAND} -E make_directory "${PYTHON_DEST}"
diff --git plugins/3d/idf/CMakeLists.txt plugins/3d/idf/CMakeLists.txt
index 7bcc765..b57387a 100644
--- plugins/3d/idf/CMakeLists.txt
+++ plugins/3d/idf/CMakeLists.txt
@@ -29,7 +29,7 @@ target_link_libraries( s3d_plugin_idf
         ${OPENGL_LIBRARIES}
         ${wxWidgets_LIBRARIES} )
 
-if( APPLE )
+if( MACOSX_APP )
     # puts library into the main kicad.app bundle in build tree
     set_target_properties( s3d_plugin_idf PROPERTIES
         LIBRARY_OUTPUT_DIRECTORY "${OSX_BUNDLE_BUILD_PLUGIN_DIR}/3d"
diff --git plugins/3d/oce/CMakeLists.txt plugins/3d/oce/CMakeLists.txt
index 074df30..c5adb43 100644
--- plugins/3d/oce/CMakeLists.txt
+++ plugins/3d/oce/CMakeLists.txt
@@ -23,7 +23,7 @@ target_include_directories( s3d_plugin_oce PRIVATE
     $<TARGET_PROPERTY:gzip-hpp,INTERFACE_INCLUDE_DIRECTORIES>
     )
 
-if( APPLE )
+if( MACOSX_APP )
     # puts library into the main kicad.app bundle in build tree
     set_target_properties( s3d_plugin_oce PROPERTIES
         LIBRARY_OUTPUT_DIRECTORY "${OSX_BUNDLE_BUILD_PLUGIN_DIR}/3d"
diff --git plugins/3d/vrml/CMakeLists.txt plugins/3d/vrml/CMakeLists.txt
index b651598..1d3b186 100644
--- plugins/3d/vrml/CMakeLists.txt
+++ plugins/3d/vrml/CMakeLists.txt
@@ -71,7 +71,7 @@ target_include_directories( s3d_plugin_vrml PRIVATE
     $<TARGET_PROPERTY:gzip-hpp,INTERFACE_INCLUDE_DIRECTORIES>
     )
 
-if( APPLE )
+if( MACOSX_APP )
     # puts library into the main kicad.app bundle in build tree
     set_target_properties( s3d_plugin_vrml PROPERTIES
         LIBRARY_OUTPUT_DIRECTORY "${OSX_BUNDLE_BUILD_PLUGIN_DIR}/3d"
diff --git scripting/CMakeLists.txt scripting/CMakeLists.txt
index 07e7e33..244ff29 100644
--- scripting/CMakeLists.txt
+++ scripting/CMakeLists.txt
@@ -62,7 +62,7 @@ if( MAKE_LINK_MAPS )
         LINK_FLAGS "-Wl,-cref,-Map=_scripting.kiface.map" )
 endif()
 
-if( APPLE )
+if( MACOSX_APP )
     set_target_properties( scripting_kiface PROPERTIES
         LIBRARY_OUTPUT_DIRECTORY ${OSX_BUNDLE_BUILD_KIFACE_DIR}
         )
diff --git scripting/python_scripting.cpp scripting/python_scripting.cpp
index e292887..b2531e8 100644
--- scripting/python_scripting.cpp
+++ scripting/python_scripting.cpp
@@ -154,7 +154,7 @@ bool SCRIPTING::scriptingSetup()
         wxSetEnv( wxT( "PATH" ), kipython );
     }
   #endif
-#elif defined( __WXMAC__ )
+#elif defined( __MACOSX_APP__ )
 
     // Add default paths to PYTHONPATH
     wxString pypath;
diff --git translation/CMakeLists.txt translation/CMakeLists.txt
index 6a71974..152cf43 100644
--- translation/CMakeLists.txt
+++ translation/CMakeLists.txt
@@ -1,7 +1,7 @@
 if( UNIX AND KICAD_I18N_UNIX_STRICT_PATH )
     set( KICAD_I18N_PATH ${CMAKE_INSTALL_PREFIX}/share/locale
         CACHE PATH "Location of KiCad i18n files." )
-elseif( APPLE )
+elseif( MACOSX_APP )
     set( KICAD_I18N_PATH ${KICAD_DATA}/internat
         CACHE PATH "Location of KiCad i18n files." )
 else()
diff --git utils/idftools/CMakeLists.txt utils/idftools/CMakeLists.txt
index c6dbff6..b1402bf 100644
--- utils/idftools/CMakeLists.txt
+++ utils/idftools/CMakeLists.txt
@@ -42,7 +42,7 @@ target_link_libraries( idf2vrml
     ${wxWidgets_LIBRARIES}
     )
 
-if( APPLE )
+if( MACOSX_APP )
     # puts binaries into the *.app bundle while linking
     set_target_properties( idfcyl idfrect dxf2idf idf2vrml PROPERTIES
         RUNTIME_OUTPUT_DIRECTORY ${OSX_BUNDLE_BUILD_BIN_DIR}
diff --git utils/kicad2step/CMakeLists.txt utils/kicad2step/CMakeLists.txt
index a63cd00..55796eb 100644
--- utils/kicad2step/CMakeLists.txt
+++ utils/kicad2step/CMakeLists.txt
@@ -59,7 +59,7 @@ target_include_directories( kicad2step_lib PRIVATE
 set_target_properties( kicad2step_bin
         PROPERTIES OUTPUT_NAME kicad2step)
 
-if( APPLE )
+if( MACOSX_APP )
     # puts binaries into the *.app bundle while linking
     set_target_properties( kicad2step_bin PROPERTIES
             RUNTIME_OUTPUT_DIRECTORY ${OSX_BUNDLE_BUILD_BIN_DIR}
